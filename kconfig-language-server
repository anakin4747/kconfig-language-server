#!/usr/bin/env bash

set -u

ROOTPATH=""
SPEC=""

get_id() {
    local id="$(echo "$1" | jq -r .id)"
    if [[ "$id" == "null" ]]; then
        id=""
    fi
    echo "$id"
}

send_response() {
    local response="$1"
    local length=${#response}
    printf "Content-Length: %d\r\n\r\n%s" "$length" "$response"
}

handle_initialize() {
    local id="$(get_id "$1")"
    ROOTPATH="$(echo "$1" | jq -r .params.rootPath)"
    send_response "$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "capabilities": {
      "hoverProvider": true
    }
  }
}
EOF
)"
}

get_lines() {
    awk "/$1/ {flag=1} /$2/ {flag=0} flag" "$3"
}

get_docs() {
    local spec="$ROOTPATH/Documentation/kbuild/kconfig-language.rst"

    if [ ! -f "$spec" ]; then
        spec="$SPEC"
    fi

    case "$1" in
        config)
            get_lines "^Menu entries$" "^Menu attributes$" "$spec"
            ;;
        bool|tristate|string|hex|int|prompt)
            get_lines "^Menu attributes$" "^- default value" "$spec"
            ;;
        default)
            get_lines "^- default value" "^- type definition" "$spec"
            ;;
        def_bool|def_tristate)
            get_lines "^- type definition \+ default" "^- dependencies" "$spec"
            ;;
        depends)
            get_lines "^- dependencies" "^- reverse dependencies" "$spec"
            ;;
        select)
            get_lines "^- reverse dependencies" "^- weak reverse dependencies" "$spec"
            ;;
        imply)
            get_lines "^- weak reverse dependencies" "^- limiting menu display" "$spec"
            ;;
        visible)
            get_lines "^- limiting menu display" "^- numerical ranges" "$spec"
            ;;
        range)
            get_lines "^- numerical ranges" "^- help text" "$spec"
            ;;
        help|---help---)
            get_lines "^- help text" "^- misc options" "$spec"
            ;;
        option|defconfig_list|modules|allnoconfig_y)
            get_lines "^- misc options" "^Menu dependencies" "$spec"
            ;;
        menu|endmenu)
            get_lines "^Menu structure" "^Kconfig syntax" "$spec"
            ;;
        mainmenu)
            get_lines "^mainmenu::" "Kconfig source file comment" "$spec"
            ;;
        comment)
            get_lines "^comment::" "^menu::" "$spec"
            ;;
        "#")
            get_lines "Kconfig source file comment" "^Kconfig hints" "$spec"
            ;;
        source)
            get_lines "^source::" "^mainmenu::" "$spec"
            ;;
        choice|endchoice)
            get_lines "^choices::" "^comment::" "$spec"
            ;;
        *)
            ;;
    esac
}

get_cword() {
    local line_nr="$1"
    local character="$2"
    local file="$3"
    local line=$(sed -n "${line_nr}p" "$file")

    [ -z "$line" ] && return

    # start at the character walk back to the start or until whitespace
    # what happens when you don't see whitespace? assume cword starts at
    # character 1
    for (( start=character-1; start>=1; start-- )); do
        [[ "${line:$start:1}" =~ [[:space:]] ]] && break
    done

    # now $start has the start of cword or just the start of a line
    # walk to the end of the line until you end or hit whitespace
    for (( end=start+1; end < ${#line}; end++ )); do
        [[ "${line:$end:1}" =~ [[:space:]] ]] && break
    done

    echo ${line:start:end-start}
}

handle_hover() {
    local id="$(get_id $1)"
    local line="$(echo "$1" | jq -r .params.position.line)"
    line=$((line + 1))
    local character="$(echo "$1" | jq -r .params.position.character)"
    character=$((character + 1))
    local file="$(echo "$1" | jq -r .params.textDocument.uri | sed 's|file://||')"
    local cword="$(get_cword "$line" "$character" "$file")"
    local docs="$(get_docs "$cword")"

    send_response "$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "contents": {
      "kind": "markdown",
      "value": "$docs"
    }
  }
}
EOF
)"
}

parse_headers() {
    local content_length=0
    while IFS= read -r line; do
        [[ "$line" == $'\r' || -z "$line" ]] && break
        if [[ "$line" =~ Content-Length:\ ([0-9]+) ]]; then
            content_length=${BASH_REMATCH[1]}
        fi
    done
    echo "$content_length"
}

main() {

    SPEC=$(find /usr -name kconfig.spec 2> /dev/null)

    if [ ! -f "$SPEC" ]; then
        echo "failed to find kconfig.spec"
        echo "cannot provide documentation"
        echo "try to reinstall kconfig-language-server"
        exit 1
    fi

    while true; do
        local content_length="$(parse_headers)"

        if (( content_length < 0 )); then
            continue
        fi

        read -r -n "$content_length" body

        local id="$(get_id "$body")"
        local method="$(echo "$body" | jq -r .method)"

        case "$method" in
            "initialize")
                handle_initialize "$body"
                ;;
            "textDocument/hover")
                handle_hover "$body"
                ;;
            "shutdown")
                send_response "{\"jsonrpc\":\"2.0\",\"id\":$id,\"result\":null}"
                ;;
            "exit")
                exit 0
                ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi
