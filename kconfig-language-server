#!/usr/bin/env bash

REQUIRED_TOOLS=(jq awk sed rg)

are_deps_met() {

    MISSING_TOOLS=()

    for tool in "${REQUIRED_TOOLS[@]}"; do
        if ! command -v "$tool" > /dev/null 2>&1; then
            MISSING_TOOLS+=("$tool")
        fi
    done

    if [ ${#MISSING_TOOLS[@]} -ne 0 ]; then
        echo "kconfig-language-server is missing the following dependencies: ${MISSING_TOOLS[*]}"
        return 1
    fi
}

ROOTPATH=""
SPEC=""

get_id() {
    local id="$(echo "$1" | jq -r .id)"
    if [[ "$id" == "null" ]]; then
        id=""
    fi
    echo "$id"
}

get_lines() {
    awk "/$1/ {flag=1} /$2/ {flag=0} flag" "$3"
}

get_symbol_help() {
    local multiline=0
    local files="$(rg -l "config $1$" "$2")"

    if [ "$(wc -l <<< "$files")" -gt 1 ]; then
        local multiline=1
    fi

    for file in $files; do
        [ -f "$file" ] || continue

        local config="$(awk "
            /config $1$/ {flag=1}
            /^[a-z]/ && !/config $1$/ {flag=0}
            flag
        " "$file")"

        [[ "$config" =~ help ]] || continue

        awk "/help/ {
            flag=1;
            if ($multiline) print \"\nFrom: $file\n\";
            next
        } flag" <<< "$config" | sed 's/^[ \t]*//g'
    done
}

get_docs() {
    if [ -d "$2" ]; then
        ROOTPATH="$2"
    fi

    local spec="$ROOTPATH/Documentation/kbuild/kconfig-language.rst"

    if [ ! -f "$spec" ]; then
        spec="$SPEC"
    fi

    case "$1" in
        config)
            get_lines "^Menu entries$" "^Menu attributes$" "$spec"
            ;;
        bool|tristate|string|hex|int)
            get_lines "^Menu attributes$" "^- input prompt" "$spec"
            ;;
        prompt)
            get_lines "^- input prompt:" "^- default value" "$spec"
            ;;
        default)
            get_lines "^- default value" "^- type definition" "$spec"
            ;;
        def_bool|def_tristate)
            get_lines "^- type definition \+ default" "^- dependencies" "$spec"
            ;;
        depends)
            get_lines "^- dependencies" "^- reverse dependencies" "$spec"
            ;;
        select)
            get_lines "^- reverse dependencies" "^- weak reverse dependencies" "$spec"
            ;;
        imply)
            get_lines "^- weak reverse dependencies" "^- limiting menu display" "$spec"
            ;;
        visible)
            get_lines "^- limiting menu display" "^- numerical ranges" "$spec"
            ;;
        range)
            get_lines "^- numerical ranges" "^- help text" "$spec"
            ;;
        help|---help---)
            get_lines "^- help text" "^- module attribute" "$spec"
            ;;
        modules)
            get_lines "^- module attribute" "^Menu dependencies" "$spec"
            ;;
        menuconfig)
            get_lines "^menuconfig::" "^choices::" "$spec"
            ;;
        menu|endmenu)
            get_lines "^Menu structure" "^Kconfig syntax" "$spec"
            ;;
        mainmenu)
            get_lines "^mainmenu::" "Kconfig source file comment" "$spec"
            ;;
        comment)
            get_lines "^comment::" "^menu::" "$spec"
            ;;
        if|endif)
            get_lines "^if::" "^source::" "$spec"
            ;;
        "#")
            get_lines "Kconfig source file comment" "^Kconfig hints" "$spec"
            ;;
        source)
            get_lines "^source::" "^mainmenu::" "$spec"
            ;;
        choice|endchoice)
            get_lines "^choices::" "^comment::" "$spec"
            ;;
        [A-Z_][A-Z0-9_]*)
            get_symbol_help "$1" "$ROOTPATH"
            ;;
        *)
            ;;
    esac
}

get_cword() {
    local line_nr="$1"
    local character="$2"
    local file="$3"
    local line=$(sed -n "${line_nr}p" "$file")

    [ -z "$line" ] && return

    # start at the character walk back to the start or until whitespace
    # what happens when you don't see whitespace? assume cword starts at
    # character 1
    for (( start=character-1; start>=1; start-- )); do
        case "${line:$start:1}" in
            [a-zA-Z0-9_-])
                continue
                ;;
            *)
                break
                ;;
        esac
    done

    if [ "$start" -gt 1 ]; then
        start=$((start + 1))
    fi

    # now $start has the start of cword or just the start of a line
    # walk to the end of the line until you end or hit whitespace
    for (( end=character; end < ${#line}; end++ )); do
        case "${line:$end:1}" in
            [a-zA-Z0-9_-])
                continue
                ;;
            *)
                break
                ;;
        esac
    done

    echo ${line:start:end-start}
}

send_response() {
    local response="$1"
    local length=${#response}
    printf "Content-Length: %d\r\n\r\n%s" "$length" "$response"
}

parse_headers() {
    local content_length=0
    while IFS= read -r line; do
        [[ "$line" == $'\r' || -z "$line" ]] && break
        if [[ "$line" =~ Content-Length:\ ([0-9]+) ]]; then
            content_length=${BASH_REMATCH[1]}
        fi
    done
    echo "$content_length"
}

# Handlers {{{

handle_initialize() {
    local id="$(get_id "$1")"
    ROOTPATH="$(echo "$1" | jq -r .params.rootPath)"
    send_response "$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "capabilities": {
      "hoverProvider": true,
      "definitionProvider": true
    }
  }
}
EOF
)"
}


handle_hover() {
    local id="$(get_id $1)"
    local line="$(echo "$1" | jq -r .params.position.line)"
    local character="$(echo "$1" | jq -r .params.position.character)"
    local file="$(echo "$1" | jq -r .params.textDocument.uri | sed 's|file://||')"
    local cword="$(get_cword "$((line + 1))" "$((character + 1))" "$file")"
    local docs="$(get_docs "$cword" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')"

    send_response "$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "contents": {
      "kind": "markdown",
      "value": "$docs"
    }
  }
}
EOF
)"
}

# }}}

main() {

    are_deps_met || exit 1

    SPEC=$(find /usr -name kconfig-language.rst 2> /dev/null)

    if [ ! -f "$SPEC" ]; then
        echo "failed to find kconfig-language.rst"
        echo "cannot provide documentation"
        echo "try to reinstall kconfig-language-server"
        exit 1
    fi

    while true; do
        local content_length="$(parse_headers)"

        if (( content_length < 0 )); then
            continue
        fi

        read -r -n "$content_length" body

        local id="$(get_id "$body")"
        local method="$(echo "$body" | jq -r .method)"

        case "$method" in
            "initialize")
                handle_initialize "$body"
                ;;
            "textDocument/hover")
                handle_hover "$body"
                ;;
            "shutdown")
                send_response "{\"jsonrpc\":\"2.0\",\"id\":$id,\"result\":null}"
                ;;
            "exit")
                exit 0
                ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi
