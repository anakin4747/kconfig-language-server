#!/usr/bin/env bash

set -euo pipefail

ROOTPATH=""
SPEC=""

get_id() {
    local id="$(echo "$1" | jq -r .id)"
    if [[ "$id" == "null" ]]; then
        id=""
    fi
    echo "$id"
}

send_response() {
    local response="$1"
    local length=${#response}
    printf "Content-Length: %d\r\n\r\n%s" "$length" "$response" | tee -a /home/kin/src/kconfig-language-server/log
}

handle_initialize() {
    local id="$(get_id "$1")"
    ROOTPATH="$(echo "$1" | jq -r .params.rootPath)"
    send_response "$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "capabilities": {
      "hoverProvider": true
    }
  }
}
EOF
)"
}

get_docs() {
    local spec="$ROOTPATH/Documentation/kbuild/kconfig-language.rst"

    if [ ! -f "$spec" ]; then
        spec="$SPEC"
    fi

    case "$1" in
        config)
            awk '/^Menu entries$/ {flag=1} /^Menu attributes$/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        bool|tristate|string|hex|int|prompt)
            awk '/^Menu attributes$/ {flag=1} /^- default value/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        default)
            awk '/^- default value/ {flag=1} /^- type definition/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        def_bool|def_tristate)
            awk '/^- type definition \+ default/ {flag=1} /^- dependencies/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        depends)
            awk '/^- dependencies/ {flag=1} /^- reverse dependencies/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        select)
            awk '/^- reverse dependencies/ {flag=1} /^- weak reverse dependencies/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        imply)
            awk '/^- weak reverse dependencies/ {flag=1} /^- limiting menu display/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        visible)
            awk '/^- limiting menu display/ {flag=1} /^- numerical ranges/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        range)
            awk '/^- numerical ranges/ {flag=1} /^- help text/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        help|---help---)
            awk '/^- help text/ {flag=1} /^- misc options/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        option|defconfig_list|modules|allnoconfig_y)
            awk '/^- misc options/ {flag=1} /^Menu dependencies/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        menu|endmenu)
            awk '/^Menu structure/ {flag=1} /^Kconfig syntax/ {flag=0} flag' "$spec" \
                | sed 's/"/\\"/g'
            ;;
        *)
            ;;
    esac
}

get_cword() {
    local line="$1"
    local character="$2"
    local file="$3"
    awk -v offset="$character" \
        "NR==$line {if (offset >= 1 && offset - 1 <= length(\$1)) print \$1}" \
        "$file"
}

handle_hover() {
    local id="$(get_id $1)"
    local line="$(echo "$1" | jq -r .params.position.line)"
    line=$((line + 1))
    local character="$(echo "$1" | jq -r .params.position.character)"
    character=$((character + 1))
    local file="$(echo "$1" | jq -r .params.textDocument.uri | sed 's|file://||')"
    local cword="$(get_cword "$line" "$character" "$file")"
    local docs="$(get_docs "$cword")"

    send_response "$(cat <<EOF
{
  "jsonrpc": "2.0",
  "id": $id,
  "result": {
    "contents": {
      "kind": "markdown",
      "value": "$docs"
    }
  }
}
EOF
)"
}

parse_headers() {
    local content_length=0
    while IFS= read -r line; do
        [[ "$line" == $'\r' || -z "$line" ]] && break
        if [[ "$line" =~ Content-Length:\ ([0-9]+) ]]; then
            content_length=${BASH_REMATCH[1]}
        fi
    done
    echo "$content_length"
}

main() {

    SPEC=$(find /usr -name kconfig.spec 2> /dev/null)

    if [ ! -f "$SPEC" ]; then
        echo "failed to find kconfig.spec"
        echo "cannot provide documentation"
        echo "try to reinstall kconfig-language-server"
        exit 1
    fi

    while true; do
        local content_length="$(parse_headers)"

        if (( content_length < 0 )); then
            continue
        fi

        read -r -n "$content_length" body
        echo "$body" >> /home/kin/src/kconfig-language-server/test/bodies

        local id="$(get_id "$body")"
        local method="$(echo "$body" | jq -r .method)"

        case "$method" in
            "initialize")
                handle_initialize "$body"
                ;;
            "textDocument/hover")
                handle_hover "$body"
                ;;
            "shutdown")
                send_response "{\"jsonrpc\":\"2.0\",\"id\":$id,\"result\":null}"
                ;;
            "exit")
                exit 0
                ;;
        esac
    done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi
